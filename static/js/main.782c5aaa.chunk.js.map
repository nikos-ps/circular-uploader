{"version":3,"sources":["theme/colors.js","theme/GlobalStyles.js","theme/typography.js","theme/theme.js","components/Card/Card.js","components/CircularLoader/CircularLoader.styled.js","components/CircularLoader/CircularLoader.js","components/Text/Text.js","components/Button/Button.styled.js","components/Button/Button.js","features/TransferUploader/ActionButtons.js","features/TransferUploader/TransferUploader.js","App.js","reportWebVitals.js","index.js"],"names":["colors","css","GlobalStyles","createGlobalStyle","getTextStyles","fontWeight","fontSize","lineHeight","parseInt","theme","typography","h1","h2","h3","h4","body","bodyMedium","bodyBold","bodySmall","bodySmallBold","bodyCaption","Container","styled","div","Footer","Card","content","actions","rotation","keyframes","RotatingCircle","circle","Label","span","CircularLoader","radius","stroke","progress","normalizedRadius","useMemo","circumference","Math","PI","strokeDashoffset","height","width","data-testid","fill","strokeWidth","strokeDasharray","r","cx","cy","Text","size","StyledButton","button","props","secondary","Button","onClick","children","ActionsContainer","ActionButtons","memo","isLoaderActive","stopLoader","startLoader","StatusText","InfoText","TransferUploader","useState","setProgress","isTransfering","setIsTransfering","intervalRef","useRef","useCallback","current","setInterval","previous","clearInterval","useEffect","as","Main","main","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.782c5aaa.chunk.js","sourcesContent":["import { css } from \"styled-components\";\r\n\r\nconst colors = css`\r\n  --colors-dodgerBlue: #409fff;\r\n  --colors-scienceBlue: #0073e5;\r\n  --colors-iron: #d4d7d9;\r\n  --colors-woodSmoke: #17181a;\r\n  --colors-silverSand: #babcbf;\r\n  --colors-porcelain: #e8ebed;\r\n  --colors-abbey: #484a4d;\r\n  --colors-white: #ffffff;\r\n`;\r\n\r\nexport default colors;\r\n","import { createGlobalStyle } from \"styled-components\";\r\nimport colors from \"./colors\";\r\n\r\nconst GlobalStyles = createGlobalStyle`\r\n  \r\n  :root {\r\n    ${colors}\r\n  }\r\n`;\r\n\r\nexport default GlobalStyles;\r\n","import { css } from \"styled-components\";\r\n\r\nconst rem = (size) => `${parseInt(size) / 16}rem`;\r\n\r\nfunction getTextStyles(fontWeight, fontSize, lineHeight) {\r\n  return css`\r\n    font-weight: ${fontWeight};\r\n    font-size: ${rem(fontSize)};\r\n    line-height: ${lineHeight};\r\n    margin: 0;\r\n  `;\r\n}\r\n\r\nconst typography = {\r\n  h1: getTextStyles(500, \"30px\", 1.34),\r\n  h2: getTextStyles(500, \"26px\", 1.23),\r\n  h3: getTextStyles(500, \"24px\", 1.25),\r\n  h4: getTextStyles(400, \"22px\", 1.28),\r\n\r\n  body: getTextStyles(400, \"16px\", 1.5),\r\n  bodyMedium: getTextStyles(500, \"16px\", 1.5),\r\n  bodyBold: getTextStyles(600, \"16px\", 1.5),\r\n\r\n  bodySmall: getTextStyles(400, \"14px\", 1.29),\r\n  bodySmallBold: getTextStyles(600, \"14px\", 1.29),\r\n  bodyCaption: getTextStyles(400, \"13px\", 1.23),\r\n};\r\n\r\nexport default typography;\r\n","import typography from './typography';\r\n\r\nconst theme = {\r\n  typography,\r\n};\r\n\r\nexport default theme;\r\n","import styled from \"styled-components\";\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  background: var(--colors-white);\r\n  border-radius: 10px;\r\n  box-shadow: 0 0 12px 0 rgba(0, 0, 0, 0.1), 0 10px 30px 0 rgba(0, 0, 0, 0.2);\r\n  height: 410px;\r\n  width: 280px;\r\n`;\r\n\r\nconst Footer = styled.div`\r\n  position: relative;\r\n  margin-top: auto;\r\n  border-top: 1px solid var(--colors-iron);\r\n  height: 72px;\r\n  padding: 0 20px;\r\n`;\r\n\r\nconst Card = ({ content, actions }) => {\r\n  return (\r\n    <Container>\r\n      <div>{content}</div>\r\n      <Footer>{actions}</Footer>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import styled, { keyframes } from \"styled-components\";\r\n\r\nexport const Container = styled.div`\r\n  display: block;\r\n  margin: 30px auto 12px;\r\n  position: relative;\r\n  width: 170px;\r\n`;\r\n\r\nconst rotation = keyframes`\r\n   from {\r\n    transform: rotate(0deg);\r\n  }\r\n  to {\r\n    transform: rotate(1turn);\r\n  }\r\n`;\r\n\r\nexport const RotatingCircle = styled.circle`\r\n  border-radius: 10px;\r\n  stroke-linecap: round;\r\n  transition: stroke-dashoffset 0.2s linear, stroke 0.2s linear;\r\n  transform: rotate(-90deg);\r\n  transform-origin: 50% 50%;\r\n  animation: ${rotation} 2s linear infinite;\r\n`;\r\n\r\nexport const Label = styled.span`\r\n  color: var(--colors-woodSmoke);\r\n  font-size: 3.875em;\r\n  left: 50%;\r\n  line-height: 1;\r\n  margin: -2px 0 0 2px;\r\n  position: absolute;\r\n  top: 50%;\r\n  transform: translate(-50%, -50%);\r\n  white-space: nowrap;\r\n\r\n  span {\r\n    color: var(--colors-silverSand);\r\n    display: inline-block;\r\n    font-size: 22px;\r\n    line-height: 1;\r\n    position: relative;\r\n    top: 9px;\r\n    vertical-align: top;\r\n  }\r\n`;\r\n","import React, { useMemo } from \"react\";\r\n\r\nimport { Container, Label, RotatingCircle } from \"./CircularLoader.styled\";\r\n\r\nconst CircularLoader = ({ radius, stroke, progress }) => {\r\n  const normalizedRadius = useMemo(() => radius - stroke / 2, [radius, stroke]);\r\n  const circumference = useMemo(\r\n    () => normalizedRadius * 2 * Math.PI,\r\n    [normalizedRadius]\r\n  );\r\n  const strokeDashoffset = circumference - (progress / 100) * circumference;\r\n\r\n  return (\r\n    <Container>\r\n      <svg height={radius * 2} width={radius * 2} data-testid=\"circular-loader\">\r\n        <circle\r\n          stroke=\"var(--colors-porcelain)\"\r\n          fill=\"transparent\"\r\n          strokeWidth={stroke}\r\n          strokeDasharray={circumference + \" \" + circumference}\r\n          r={normalizedRadius}\r\n          cx={radius}\r\n          cy={radius}\r\n        ></circle>\r\n        <RotatingCircle\r\n          stroke=\"var(--colors-dodgerBlue)\"\r\n          fill=\"transparent\"\r\n          strokeWidth={stroke}\r\n          strokeDasharray={circumference + \" \" + circumference}\r\n          strokeDashoffset={strokeDashoffset}\r\n          r={normalizedRadius}\r\n          cx={radius}\r\n          cy={radius}\r\n        />\r\n      </svg>\r\n      <Label data-testid=\"progress-label\">\r\n        {progress}\r\n        <span>%</span>\r\n      </Label>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default CircularLoader;\r\n","import styled from \"styled-components\";\r\n\r\nconst Text = styled.span`\r\n  ${({ theme, size }) => size && theme.typography[size]}\r\n`;\r\n\r\nexport default Text;\r\n","import styled, { css } from \"styled-components\";\r\n\r\nconst secondary = `\r\nbackground: transparent;\r\nborder-color: var(--colors-dodgerBlue);\r\ncolor: var(--colors-dodgerBlue);\r\n\r\n&:hover {\r\n  background: transparent;\r\n  border-color: var(--colors-scienceBlue);\r\n  color: var(--colors-scienceBlue);\r\n }\r\n`;\r\n\r\nexport const StyledButton = styled.button`\r\n  background: var(--colors-dodgerBlue);\r\n  border: 1px solid var(--colors-dodgerBlue);\r\n  border-radius: 1.25em;\r\n  box-sizing: border-box;\r\n  color: var(--colors-white);\r\n  cursor: pointer;\r\n  display: inline-block;\r\n  font-size: 1em;\r\n  height: 2.5em;\r\n  font-weight: 500;\r\n  transition: border-color 0.2s cubic-bezier(0.77, 0, 0.175, 1),\r\n    background-color 0.2s cubic-bezier(0.77, 0, 0.175, 1),\r\n    color 0.2s cubic-bezier(0.77, 0, 0.175, 1);\r\n  user-select: none;\r\n  width: 150px;\r\n  outline: 0;\r\n\r\n  &:hover {\r\n    background-color: var(--colors-scienceBlue);\r\n    border-color: var(--colors-scienceBlue);\r\n  }\r\n\r\n  ${(props) =>\r\n    props.secondary\r\n      ? css`\r\n          ${secondary}\r\n        `\r\n      : \"\"}\r\n`;\r\n","import { StyledButton } from \"./Button.styled\";\r\n\r\nconst Button = ({ secondary, onClick, children }) => {\r\n  return (\r\n    <StyledButton secondary={secondary} onClick={onClick}>\r\n      {children}\r\n    </StyledButton>\r\n  );\r\n};\r\n\r\nexport default Button;\r\n","import { memo } from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nimport Button from \"components/Button\";\r\n\r\nconst ActionsContainer = styled.div`\r\n  display: flex;\r\n  height: 100%;\r\n  justify-content: center;\r\n  align-items: center;\r\n`;\r\n\r\nconst ActionButtons = memo(({ isLoaderActive, stopLoader, startLoader }) => {\r\n  return (\r\n    <ActionsContainer>\r\n      {isLoaderActive ? (\r\n        <Button secondary onClick={stopLoader}>\r\n          End\r\n        </Button>\r\n      ) : (\r\n        <Button onClick={startLoader}>Start</Button>\r\n      )}\r\n    </ActionsContainer>\r\n  );\r\n});\r\n\r\nexport default ActionButtons;\r\n","import { useEffect, useRef, useState, useCallback, useMemo } from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nimport Card from \"components/Card\";\r\nimport CircularLoader from \"components/CircularLoader\";\r\nimport Text from \"components/Text\";\r\nimport ActionButtons from \"./ActionButtons\";\r\n\r\nconst StatusText = styled(Text)`\r\n  text-align: center;\r\n  color: var(--colors-woodSmoke);\r\n`;\r\n\r\nconst InfoText = styled(Text)`\r\n  text-align: center;\r\n  color: var(--colors-abbey);\r\n  margin-top: 4px;\r\n`;\r\n\r\nconst TransferUploader = () => {\r\n  const [progress, setProgress] = useState(0);\r\n  const [isTransfering, setIsTransfering] = useState(false);\r\n  const intervalRef = useRef();\r\n\r\n  const startLoader = useCallback(() => {\r\n    setIsTransfering(true);\r\n\r\n    intervalRef.current = setInterval(() => {\r\n      setProgress((previous) => previous + 1);\r\n    }, 500);\r\n  }, []);\r\n\r\n  const stopLoader = useCallback(() => {\r\n    if (intervalRef.current) {\r\n      clearInterval(intervalRef.current);\r\n    }\r\n\r\n    setProgress(0);\r\n    setIsTransfering(false);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (progress === 100) {\r\n      clearInterval(intervalRef.current);\r\n    }\r\n  }, [progress]);\r\n\r\n  useEffect(() => {\r\n    return () => clearInterval(intervalRef.current);\r\n  }, []);\r\n\r\n  const isLoaderActive = useMemo(() => progress !== 0, [progress]);\r\n\r\n  return (\r\n    <Card\r\n      content={\r\n        <>\r\n          <CircularLoader radius={85} stroke={10} progress={progress} />\r\n          {isTransfering && (\r\n            <>\r\n              <StatusText size=\"h2\" as=\"h2\">\r\n                Transferring...\r\n              </StatusText>\r\n              <InfoText size=\"bodyCaption\" as=\"p\">\r\n                ...Transfer related info...\r\n              </InfoText>\r\n            </>\r\n          )}\r\n        </>\r\n      }\r\n      actions={\r\n        <ActionButtons\r\n          isLoaderActive={isLoaderActive}\r\n          stopLoader={stopLoader}\r\n          startLoader={startLoader}\r\n        />\r\n      }\r\n    />\r\n  );\r\n};\r\n\r\nexport default TransferUploader;\r\n","import styled from \"styled-components\";\nimport { ThemeProvider } from \"styled-components\";\n\nimport { theme, GlobalStyles } from \"./theme\";\nimport TransferUploader from \"features/TransferUploader\";\n\nconst Main = styled.main`\n  display: flex;\n  height: 100vh;\n  justify-content: center;\n  align-items: center;\n  background-color: aliceblue;\n`;\n\nfunction App() {\n  return (\n    <ThemeProvider theme={theme}>\n      <GlobalStyles />\n      <Main>\n        <TransferUploader />\n      </Main>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nimport \"./index.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}